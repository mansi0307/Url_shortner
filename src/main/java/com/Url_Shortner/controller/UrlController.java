package com.Url_Shortner.controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.NoSuchElementException;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.validator.routines.UrlValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.Url_Shortner.dto.FullUrl;
import com.Url_Shortner.dto.ShortUrl;
import com.Url_Shortner.error.InvalidUrlError;
import com.Url_Shortner.service.UrlService;


@RestController
	public class UrlController {

	    Logger logger = LoggerFactory.getLogger(UrlController.class);

	    protected final UrlService urlService;

	    @Autowired
	    public UrlController(UrlService urlService) {
	        this.urlService = urlService;
	    }

	    /**
	     * @param fullUrl Takes an object of FullUrl supplied in the request body
	     * @param request To determine the protocol://domain:port part to form shortened url
	     * @return An object of ShortUrl serialized as JSON in the response
	     * @throws UnsupportedEncodingException 
	     * @throws NoSuchAlgorithmException 
	     */
	    @PostMapping("/shorten")
	    public ResponseEntity<Object> saveUrl(@RequestParam String url) throws NoSuchAlgorithmException, UnsupportedEncodingException {

	        // Validation check if URL is valid
	        UrlValidator validator = new UrlValidator(
	                new String[]{"http", "https"}
	        );
	        
	        if (!validator.isValid(url)) {
	            InvalidUrlError error = new InvalidUrlError("url", url, "Invalid URL");

	            // returns a custom body with error message and bad request status code
	            return ResponseEntity.badRequest().body(error);
	        }
	        
	        
	        String baseUrl = "localhost:8080/";
	        
	        // Retrieving the shortened url and combining it with protocol://domain:port
	        ShortUrl shortUrl = urlService.getShortUrl(url);
	        shortUrl.setShortUrl(baseUrl + shortUrl.getShortUrl());


	        return new ResponseEntity<>(shortUrl, HttpStatus.OK);
	    }
	    
	    
	    

	    /**
	     * @param response HttpServletResponse - used to redirect to full url
	     * @param shortenString Shortened string - Text is Base62 encoded generated by "/shorten" endpoint
	     */
	    @GetMapping("/{shortenString}")
	    public void redirectToFullUrl(HttpServletResponse response, @PathVariable String shortenString) {
	        try {
	        	
	        	System.out.println(shortenString);
	        	
	            FullUrl fullUrl = urlService.getFullUrl(shortenString);
	            System.out.println(fullUrl.getFullUrl());
	            
	            // Redirects the reponse to the full url
	            response.sendRedirect(fullUrl.getFullUrl());
	        } catch (NoSuchElementException e) {

	            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Url not found", e);
	        } catch (IOException e) {

	            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Could not redirect to the full url", e);
	        }
	    }

	}



